version: '2'

networks:
  my-network:
    driver: bridge

volumes:
  ldap_data:
    driver: local
  ldap_manager:
    driver: local
  redis_data:
    driver: local
  ram-disk1:
    driver_opts:
      type: tmpfs
      o: "size=64m"
      device: tmpfs

services:
  ldap:
    image: bitnami/openldap:latest
    ports:
      - '1389:1389'
    environment:
      - BITNAMI_DEBUG=false
      - LDAP_PORT_NUMBER=1389
      - LDAP_ADMIN_USERNAME=admin
      - LDAP_ADMIN_PASSWORD=123
      - LDAP_ROOT=dc=zuzu,dc=com
      - LDAP_ALLOW_ANON_BINDING=no
      - LDAP_CUSTOM_LDIF_DIR=/import
    volumes:
      - 'ldap_data:/bitnami/openldap'
      - './ldap-schema:/import'
    networks:
      - my-network
  ldapmanager:
    image: ldapaccountmanager/lam:latest
    ports:
      - '8080:80'
    environment:
      - LAM_SKIP_PRECONFIGURE=false
      - LDAP_DOMAIN=zuzu.com
      - LDAP_BASE_DN=dc=zuzu,dc=com
      - LDAP_USERS_DN=ou=users,dc=zuzu,dc=com
      - LDAP_GROUPS_DN=ou=groups,dc=zuzu,dc=com
      - LDAP_SERVER=ldap://ldap:1389
      - LDAP_USER=cn=admin,dc=zuzu,dc=com
      - LDAP_ADMIN_PASSWORD=123
      - LDAP_READONLY_USER_PASSWORD=321
    volumes:
      - 'ldap_manager:/var/lib/ldap-account-manager/config'
    networks:
      - my-network
  nginx:
    image: nginx:alpine
    ports:
      - '8888:8888'
    volumes:
      - './nginx/conf.d:/etc/nginx/conf.d:ro'
      - './nginx/data:/data:ro'
    networks:
      - my-network
  python:
    build:
      context: ./python-auth
      dockerfile: Dockerfile.debian
    environment:
      - APP_CONFIG_FILE=/zzz/config.yaml
      - LOG_LEVEL=DEBUG
      # TODO: move the values bellow to config.yaml
      - GUNICORN_WORKERS=3
      - GUNICORN_THREADS=5
      - GUNICORN_PORT=8080
      - GUNICORN_WORKER_CLASS=gevent
    volumes:
      - './python-auth/sample-config.yaml:/zzz/config.yaml:ro'
      - 'ram-disk1:/my-tmp-dir'
      # workaround while developing.
      # I don't wanna invoke docker build each time I modify a .py file :)
      - './python-auth/sources:/app:ro'
    networks:
      - my-network
  redis:
    image: redis:alpine
    # save a snapshot of the DB every 60 seconds if at least 1 write operation was performed
    command: ["--save", "60", "1",  "--loglevel", "warning"]
    networks:
      - my-network
    volumes:
      - 'redis_data:/data'
